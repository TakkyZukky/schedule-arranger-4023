root@6521c82f361c:/app# yarn test
yarn run v1.22.18
$ jest --testTimeout=10000 --forceExit
GET /login 200 378.906 ms - 783
GET /login 200 47.161 ms - 783
  console.log
    Executing (default): CREATE TABLE IF NOT EXISTS "users" ("userId" INTEGER NOT NULL , "username" VARCHAR(255) NOT NULL, PRIMARY KEY ("userId"));

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

GET /logout 302 85.656 ms - 23
  console.log
    Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

  console.log
    Executing (default): INSERT INTO "users" ("userId","username") VALUES ($1,$2) ON CONFLICT ("userId") DO UPDATE SET "userId"=EXCLUDED."userId","username"=EXCLUDED."username" RETURNING "userId","username";

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

  console.log
    Executing (default): CREATE TABLE IF NOT EXISTS "schedules" ("scheduleId" UUID NOT NULL , "scheduleName" VARCHAR(255) NOT NULL, "memo" TEXT NOT NULL, "createdBy" INTEGER NOT NULL REFERENCES "users" ("userId") ON DELETE NO ACTION ON UPDATE CASCADE, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("scheduleId"));

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

  console.log
    Executing (default): CREATE TABLE IF NOT EXISTS "comments" ("scheduleId" UUID NOT NULL , "userId" INTEGER NOT NULL  REFERENCES "users" ("userId") ON DELETE NO ACTION ON UPDATE CASCADE, "comment" VARCHAR(255) NOT NULL, PRIMARY KEY ("scheduleId","userId"));

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

  console.log
    Executing (default): CREATE TABLE IF NOT EXISTS "candidates" ("candidateId"   SERIAL , "candidateName" VARCHAR(255) NOT NULL, "scheduleId" UUID NOT NULL, PRIMARY KEY ("candidateId"));

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

POST /schedules 403 54.691 ms - 756
  console.log
    Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'schedules' GROUP 
BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

  console.log
    Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'comments' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

  console.log
    Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'candidates' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

  console.log
    Executing (default): SELECT "scheduleId", "userId", "comment" FROM "comments" AS "comments" WHERE "comments"."scheduleId" = '';

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

  console.log
    Executing (default): CREATE TABLE IF NOT EXISTS "availabilities" ("candidateId" INTEGER NOT NULL  REFERENCES "candidates" ("candidateId") ON DELETE NO ACTION ON UPDATE CASCADE, "userId" INTEGER NOT NULL  REFERENCES "users" ("userId") ON DELETE NO ACTION ON UPDATE CASCADE, "availability" INTEGER NOT NULL DEFAULT 0, "scheduleId" UUID NOT NULL, PRIMARY KEY ("candidateId","userId"));

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

  console.log
    Executing (default): INSERT INTO "users" ("userId","username") VALUES ($1,$2) ON CONFLICT ("userId") DO UPDATE SET "userId"=EXCLUDED."userId","username"=EXCLUDED."username" RETURNING "userId","username";

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

  console.log
    Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'availabilities' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

POST /schedules 403 33.410 ms - 756
  console.log
    Executing (default): SELECT "scheduleId", "userId", "comment" FROM "comments" AS "comments" WHERE "comments"."scheduleId" = '';

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

  console.log
    Executing (default): INSERT INTO "users" ("userId","username") VALUES ($1,$2) ON CONFLICT ("userId") DO UPDATE SET "userId"=EXCLUDED."userId","username"=EXCLUDED."username" RETURNING "userId","username";

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

POST /schedules 403 29.743 ms - 756
  console.log
    Executing (default): SELECT "scheduleId", "userId", "comment" FROM "comments" AS "comments" WHERE "comments"."scheduleId" = '';

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

  console.log
    Executing (default): INSERT INTO "users" ("userId","username") VALUES ($1,$2) ON CONFLICT ("userId") DO UPDATE SET "userId"=EXCLUDED."userId","username"=EXCLUDED."username" RETURNING "userId","username";

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

POST /schedules 403 29.846 ms - 756
  console.log
    Executing (default): SELECT "scheduleId", "userId", "comment" FROM "comments" AS "comments" WHERE "comments"."scheduleId" = '';

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

  console.log
    Executing (default): INSERT INTO "users" ("userId","username") VALUES ($1,$2) ON CONFLICT ("userId") DO UPDATE SET "userId"=EXCLUDED."userId","username"=EXCLUDED."username" RETURNING "userId","username";

      at Sequelize.log (node_modules/sequelize/lib/sequelize.js:1177:15)

POST /schedules 403 31.392 ms - 756
 FAIL  test/test.js
  ● /login › ログイン時はユーザー名が表示される

    expected body '<!DOCTYPE html><html><head><title>予定調整くん</title><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1"><link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous"></head><body><nav class="navbar navbar-light bg-light"><div class="navbar-header"><a class="navbar-brand nav-link" href="/">予定調整くん</a></div><ul class="navbar-nav"><li class="nav-item"><a class="nav-link" href="/login">ログイン</a></li></ul></nav><div class="container"><a class="btn btn-info my-3" href="/auth/github">GitHubでログイン</a></div><script src="/javascripts/bundle.js"></script></body></html>' to match /testuser/

      32 |     await request(app)
      33 |       .get('/login')
    > 34 |       .expect(/testuser/)
         |        ^
      35 |       .expect(200);
      36 |   });
      37 | });

      at Object.<anonymous> (test/test.js:34:8)
      ----
      at error (node_modules/supertest/lib/test.js:330:15)
      at Test._assertBody (node_modules/supertest/lib/test.js:203:18)
      at node_modules/supertest/lib/test.js:306:17
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● /schedules › 予定が作成でき、表示される

    expected "Location" header field

      68 |         candidates: 'テスト候補1\r\nテスト候補2\r\nテスト候補3'
      69 |       })
    > 70 |       .expect('Location', /schedules/)
         |        ^
      71 |       .expect(302)
      72 |
      73 |     const createdSchedulePath = res.headers.location;

      at Object.<anonymous> (test/test.js:70:8)
      ----
      at Test._assertHeader (node_modules/supertest/lib/test.js:224:47)
      at node_modules/supertest/lib/test.js:306:17
      at Test._assertFunction (node_modules/supertest/lib/test.js:285:13)
      at Test.assert (node_modules/supertest/lib/test.js:164:23)
      at Server.localAssert (node_modules/supertest/lib/test.js:120:14)

  ● /schedules/:scheduleId/users/:userId/candidates/:candidateId › 出欠が更新できる

    TypeError: Cannot read properties of undefined (reading 'split')

      104 |       .send({ scheduleName: 'テスト出欠更新予定1', memo: 'テスト出欠更新メモ1', candidates: 'テスト出欠更新候補1' })
      105 |     const createdSchedulePath = res.headers.location;
    > 106 |     scheduleId = createdSchedulePath.split('/schedules/')[1];
          |                                      ^
      107 |     const candidate = await Candidate.findOne({
      108 |       where: { scheduleId: scheduleId }
      109 |     });

      at Object.<anonymous> (test/test.js:106:38)

  ● /schedules/:scheduleId/users/:userId/comments › コメントが更新できる

    TypeError: Cannot read properties of undefined (reading 'split')

      145 |       })
      146 |     const createdSchedulePath = res.headers.location;
    > 147 |     scheduleId = createdSchedulePath.split('/schedules/')[1];
          |                                      ^
      148 |     // 更新がされることをテスト
      149 |     const userId = 0;
      150 |     await request(app)

      at Object.<anonymous> (test/test.js:147:38)

  ● /schedules/:scheduleId?edit=1 › 予定が更新でき、候補が追加できる

    TypeError: Cannot read properties of undefined (reading 'split')

      179 |       .send({ scheduleName: 'テスト更新予定1', memo: 'テスト更新メモ1', candidates: 'テスト更新候補1' })
      180 |     const createdSchedulePath = res.headers.location;
    > 181 |     scheduleId = createdSchedulePath.split('/schedules/')[1];
          |                                      ^
      182 |     // 更新がされることをテスト
      183 |     await request(app)
      184 |       .post(`/schedules/${scheduleId}?edit=1`)

      at Object.<anonymous> (test/test.js:181:38)

  ● /schedules/:scheduleId?delete=1 › 予定に関連する全ての情報が削除できる

    TypeError: Cannot read properties of undefined (reading 'split')

      214 |       .send({ scheduleName: 'テスト削除予定1', memo: 'テスト削除メモ1', candidates: 'テスト削除候補1' })
      215 |     const createdSchedulePath = res.headers.location;
    > 216 |     const scheduleId = createdSchedulePath.split('/schedules/')[1];
          |                                            ^
      217 |
      218 |     // 出欠作成
      219 |     const candidate = await Candidate.findOne({

      at Object.<anonymous> (test/test.js:216:44)


  ● Test suite failed to run

    SequelizeDatabaseError: uuid型の入力構文が不正です: ""

      181 |
      182 | async function deleteScheduleAggregate(scheduleId) {
    > 183 |   const comments = await Comment.findAll({
          |                    ^
      184 |     where: { scheduleId: scheduleId }
      185 |   });
      186 |   const promisesCommentDestroy = comments.map((c) => { return c.destroy(); });

      at Query.formatError (node_modules/sequelize/lib/dialects/postgres/query.js:386:16)
      at Query.run (node_modules/sequelize/lib/dialects/postgres/query.js:87:18)
      at node_modules/sequelize/lib/sequelize.js:619:16
      at PostgresQueryInterface.select (node_modules/sequelize/lib/dialects/abstract/query-interface.js:952:12)
      at Function.findAll (node_modules/sequelize/lib/model.js:1753:21)
      at deleteScheduleAggregate (routes/schedules.js:183:20)
      at test/test.js:58:5

  ● Test suite failed to run

    SequelizeDatabaseError: uuid型の入力構文が不正です: ""

      181 |
      182 | async function deleteScheduleAggregate(scheduleId) {
    > 183 |   const comments = await Comment.findAll({
          |                    ^
      184 |     where: { scheduleId: scheduleId }
      185 |   });
      186 |   const promisesCommentDestroy = comments.map((c) => { return c.destroy(); });

      at Query.formatError (node_modules/sequelize/lib/dialects/postgres/query.js:386:16)
      at Query.run (node_modules/sequelize/lib/dialects/postgres/query.js:87:18)
      at node_modules/sequelize/lib/sequelize.js:619:16
      at PostgresQueryInterface.select (node_modules/sequelize/lib/dialects/abstract/query-interface.js:952:12)
      at Function.findAll (node_modules/sequelize/lib/model.js:1753:21)
      at deleteScheduleAggregate (routes/schedules.js:183:20)
      at test/test.js:97:5

  ● Test suite failed to run

    SequelizeDatabaseError: uuid型の入力構文が不正です: ""

      181 |
      182 | async function deleteScheduleAggregate(scheduleId) {
    > 183 |   const comments = await Comment.findAll({
          |                    ^
      184 |     where: { scheduleId: scheduleId }
      185 |   });
      186 |   const promisesCommentDestroy = comments.map((c) => { return c.destroy(); });

      at Query.formatError (node_modules/sequelize/lib/dialects/postgres/query.js:386:16)
      at Query.run (node_modules/sequelize/lib/dialects/postgres/query.js:87:18)
      at node_modules/sequelize/lib/sequelize.js:619:16
      at PostgresQueryInterface.select (node_modules/sequelize/lib/dialects/abstract/query-interface.js:952:12)
      at Function.findAll (node_modules/sequelize/lib/model.js:1753:21)
      at deleteScheduleAggregate (routes/schedules.js:183:20)
      at test/test.js:134:5

  ● Test suite failed to run

    SequelizeDatabaseError: uuid型の入力構文が不正です: ""

      181 |
      182 | async function deleteScheduleAggregate(scheduleId) {
    > 183 |   const comments = await Comment.findAll({
          |                    ^
      184 |     where: { scheduleId: scheduleId }
      185 |   });
      186 |   const promisesCommentDestroy = comments.map((c) => { return c.destroy(); });

      at Query.formatError (node_modules/sequelize/lib/dialects/postgres/query.js:386:16)
      at Query.run (node_modules/sequelize/lib/dialects/postgres/query.js:87:18)
      at node_modules/sequelize/lib/sequelize.js:619:16
      at PostgresQueryInterface.select (node_modules/sequelize/lib/dialects/abstract/query-interface.js:952:12)
      at Function.findAll (node_modules/sequelize/lib/model.js:1753:21)
      at deleteScheduleAggregate (routes/schedules.js:183:20)
      at test/test.js:172:5

Test Suites: 1 failed, 1 total
Tests:       6 failed, 2 passed, 8 total
Snapshots:   0 total
Time:        3.649 s, estimated 4 s
Ran all test suites.
Force exiting Jest: Have you considered using `--detectOpenHandles` to detect async operations that kept running after all tests finished?
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
